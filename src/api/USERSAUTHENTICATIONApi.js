/*
 * SHOPPERS COMMUNITY API
 * Endpoints for the Shoppers community backend
 *
 * OpenAPI spec version: 1.0.0
 * Contact: joelnyongesa148@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {LoginBody} from '../model/LoginBody';
import {SignupBody} from '../model/SignupBody';

/**
* USERSAUTHENTICATION service.
* @module api/USERSAUTHENTICATIONApi
* @version 1.0.0
*/
export class USERSAUTHENTICATIONApi {

    /**
    * Constructs a new USERSAUTHENTICATIONApi. 
    * @alias module:api/USERSAUTHENTICATIONApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addUser operation.
     * @callback moduleapi/USERSAUTHENTICATIONApi~addUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new user to the database
     * @param {module:model/SignupBody} body user object that needs to be added to the database
     * @param {module:api/USERSAUTHENTICATIONApi~addUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addUser(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addUser");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback moduleapi/USERSAUTHENTICATIONApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * log in an existing user to the database
     * @param {module:model/LoginBody} body user credentials to sign in
     * @param {module:api/USERSAUTHENTICATIONApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginUser(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling loginUser");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}