/*
 * SHOPPERS COMMUNITY API
 * Endpoints for the Shoppers community backend
 *
 * OpenAPI spec version: 1.0.0
 * Contact: joelnyongesa148@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {IdReviewsBody} from '../model/IdReviewsBody';

/**
* USERS service.
* @module api/USERSApi
* @version 1.0.0
*/
export class USERSApi {

    /**
    * Constructs a new USERSApi. 
    * @alias module:api/USERSApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the usersIdGet operation.
     * @callback moduleapi/USERSApi~usersIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a user
     * @param {Number} id ID to get the specific user
     * @param {module:api/USERSApi~usersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersIdReviewsGet operation.
     * @callback moduleapi/USERSApi~usersIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve platform reviews authored by a specific user
     * @param {Number} id A specific users&#x27; id
     * @param {module:api/USERSApi~usersIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersIdReviewsGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdReviewsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersIdReviewsPost operation.
     * @callback moduleapi/USERSApi~usersIdReviewsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user review
     * @param {module:model/IdReviewsBody} body a review object that needs to be added to the database
     * @param {Number} id A specific user id
     * @param {module:api/USERSApi~usersIdReviewsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersIdReviewsPost(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersIdReviewsPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdReviewsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{id}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersIdSearchQueriesGet operation.
     * @callback moduleapi/USERSApi~usersIdSearchQueriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get search queries by a specific user
     * @param {Number} id User id
     * @param {module:api/USERSApi~usersIdSearchQueriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersIdSearchQueriesGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdSearchQueriesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{id}/search_queries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}